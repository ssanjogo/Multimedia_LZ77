{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"LZ77/","title":"LZ77 Functions","text":"<p>On this page you will find the methods used to code LZ77.</p>"},{"location":"LZ77/#src.LZ77Functions.LZ77Functions.lz77_compress","title":"<code>lz77_compress(data, Ment, Mdes)</code>","text":"<p>This method is used to compress some data with the lz77 algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>data(string)</code> <p>The information that we want to compress.</p> required <code>Ment(int)</code> <p>The input window.</p> required <code>Mdes(int)</code> <p>The sliding window.</p> required <p>Returns:   compressed_data: Output of the data compressed.</p> Source code in <code>src/LZ77Functions/LZ77Functions.py</code> <pre><code>def lz77_compress(data, Ment, Mdes):\n    '''\n    This method is used to compress some data with the lz77 algorithm.\n\n    Args:\n      data(string): The information that we want to compress.\n      Ment(int): The input window.\n      Mdes(int): The sliding window.\n    Returns:\n      compressed_data: Output of the data compressed.\n    '''\n\n    validate_configuration(Ment, Mdes, len(data))\n    compressed_data = str(data[0:Mdes])\n    print(\"COMPRESSED_DATA_START\")\n    print(compressed_data)\n    i = Mdes #letra por la que vamos\n    while i &lt; len(data):\n        if (i &gt; len(data)-Ment):\n            print(\"Remaining data - \"+str(data[i:len(data)]))\n            compressed_data+=str(data[i:len(data)])\n            return compressed_data\n\n        match_found = False\n        #Para j en rango 1 hasta el tama\u00f1o de la entrada o el maximo de la cadena... Para saber cuantos valores comparamos\n        print(i)\n        print(str(data[max(0, i - Mdes):max(0, i - Mdes)+Mdes])+\" - \"+str(data[i:i+min(Ment, len(data) - i)]))\n        print()\n\n        for j in range(min(Ment, len(data) - i),1,-1):\n            print(\"Entrada: \")\n            print(data[i:i+j])\n            if j == 1:\n                return \"Literal\"\n\n            #Iteracion para comparar por la ventan deslizante\n            for k in range(max(0, i - Mdes),max(0, i - Mdes)+Mdes):\n                if j &gt; i-k:\n                    print(\"j :\"+str(j)+\" , i-k \"+str(i-k))\n                    break\n                print(\"Letra :\",str(i))\n                print(\"tama\u00f1o comparar :\",str(j))\n                print(\"posicion deslizante :\",str(k))\n                print(\"Comparacion Deslizante\")\n                print(str(data[k:k+j]) +\" --- \"+str(data[i:i+j]))\n                print()\n                if data[i:i+j] == data[k:k+j]:\n                    match_found = True\n                    match_length = j\n                    match_distance = i - k\n                    compressed_data += '1'\n                    print(\"Zero compressed\")\n                    print(format(0, '0' + str(int(math.log2(Ment))) + 'b'))\n                    if match_length==Ment:\n                        compressed_data +=format(0, '0' + str(int(math.log2(Ment))) + 'b')\n                    else:\n                        compressed_data +=format(match_length, '0' + str(int(math.log2(Ment))) + 'b')\n                    if match_distance==Mdes:\n                        compressed_data +=format(0, '0' + str(int(math.log2(Mdes))) + 'b')\n                    else:\n                        compressed_data +=format(match_distance, '0' + str(int(math.log2(Mdes))) + 'b')\n\n\n                    print(\"compressed\")\n                    print(data[i:i+j])\n                    print(data[k:k+j])\n                    print(\"(\"+str(match_length)+\",\"+str(match_distance)+\")\")\n                    print(compressed_data)\n                    i += match_length\n\n                    break\n            if match_found:\n                break\n\n        if not match_found:\n            print(\"Literal\")\n            compressed_data += '0' + data[i]\n            i += 1\n        match_found=False\n\n    return compressed_data[:Mdes] + compressed_data[Mdes:]\n</code></pre>"}]}